rules_version = '2'
service cloud.firestore {
    match /databases/{database}/documents {
        match /{document=**} {

            // Required for collection group queries
            match /posts/{postId} {
                allow read;
            }
            
             match /provinces/{provinceId}/posts/{postId} {
                allow read;
                allow create: if request.auth.uid == request.resource.data.uid && request.time == request.resource.data.createdAt;
            		allow update: if request.auth.uid == resource.data.uid 
                && request.resource.data.keys().hasOnly(['address', 'content', 'phone', 'photoUrl', 'published', 'typeOfService', 'updatedAt' ]);
            }

            match /users/{userId} {
                allow read;
                allow create: if isValidUser(userId);
            }

            match /usernames/{username} {
                allow read;
                allow create: if isValidUsername(username);
            }

            match /users/{userId}/posts/{postId} {
                allow read;
                allow create: if canCreatePost(userId);
                allow update: if canUpdatePost(userId)
                allow delete: if request.auth.uid == userId;
            }
            
            match /provinces/{provinceId}/posts/{postId} {
                allow read;
                allow create: if canCreateProvincePost(userId);
                allow update: if canUpdatePost(userId)
                allow delete: if request.auth.uid == userId;
            }

            // User
            
            function isValidUser(userId) {
                let isOwner = request.auth.uid == userId;
                let username = request.resource.data.username;
                let createdValidUsername = existsAfter(/databases/$(database)/documents/usernames/$(username));

                return isOwner && createdValidUsername;
            }

            function isValidUsername(username) {
                let isOwner = request.auth.uid == request.resource.data.uid;
                let isValidLength = username.size() >= 3 && username.size() <= 15;
                let isValidUserDoc = getAfter(/databases/$(database)/documents/users/$(request.auth.uid)).data.username == username;

                return isOwner && isValidLength && isValidUserDoc;
            }
            
            // Posts

            function canCreatePost(userId) {
                let isOwner = request.auth.uid == userId;
                let isNow = request.time == request.resource.data.createdAt;
                let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
                let usernameMatches = username == request.resource.data.username;

                return isOwner && isNow && usernameMatches;
            }

            function canUpdatePost(userId) {
                let isOwner = request.auth.uid == userId;
                let isNow = request.time == request.resource.data.updatedAt;
                let doesNotUpdateForbidden = !request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid','username', 'title', 'slug']);

                return isOwner && isNow && doesNotUpdateForbidden;
            }
            
            function canCreateProvincePost(userId) {
                let isOwner = request.auth.uid == userId;
                let isNow = request.time == request.resource.data.createdAt;
                let username = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.username;
                let usernameMatches = username == request.resource.data.username;

                return isOwner && isNow && usernameMatches;
            }

            
        }
    }
}